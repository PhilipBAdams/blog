<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Systems on Philip Adams</title><link>https://pbada.ms/tags/systems/</link><description>Recent content in Systems on Philip Adams</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 08 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://pbada.ms/tags/systems/index.xml" rel="self" type="application/rss+xml"/><item><title>Product Quantization support in SPTAG is now Open Source</title><link>https://pbada.ms/p/sptag-pq/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://pbada.ms/p/sptag-pq/</guid><description>If you&amp;rsquo;re reading this blog because you&amp;rsquo;re interested in ANN search, this is a small update for you! The product quantization (PQ) support I&amp;rsquo;ve been working on in the SPTAG project has been open-sourced.
SPTAG is an ANN search algorithm that leverages a combination of a space partitioning tree (usually, a balanced k-means tree or k-d tree) and graph (usually, a relative neighborhood graph or KNN graph) to try and provide a good balance between high recall, reasonable index build times, and throughput.</description></item><item><title>Hierarchical PQ for ANN Search</title><link>https://pbada.ms/p/multi-pq/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate><guid>https://pbada.ms/p/multi-pq/</guid><description>Note: This approach is not performant in practice. Please don&amp;rsquo;t use this in a production system. I&amp;rsquo;ve written about it here because I think that it&amp;rsquo;s a cool relaxation of PQ that clarifies some of the tradeoffs that make PQ good.
Background Approximate Nearest Neighbors (ANN) Search is a simple problem: given a vector query vector $q$, a set of database vectors $V$, and a metric $d$, find the $v\in V$ that minimize $d(q, v)$.</description></item></channel></rss>